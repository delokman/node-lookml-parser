{
	const mergeable_proto = {isMergeable:true}
	function mergeable(o){return Object.assign(Object.create(mergeable_proto),o)}
	function assignSuper(obj,type,name){
			if(!type || type=="_proto__" || !name){return}
			if(isObject(obj)){
				if(obj._type){obj["_"+type]=name}
				Object.values(obj).forEach(subObj => assignSuper(subObj, type, name))
				}
			if(obj.forEach){
				obj.forEach(subObj => assignSuper(subObj, type, name))
			}
			return;
		}
	function groupDeclarations(params){
			var collection = {};
			params.forEach((p,i)=>{
					try{
					if(isObject(p.value)){p.value._type=p.type;}
					assignSuper(p.value,p.type,p.name)
					if(p.name){ //Named Parameter, use an object/hashmap
							if(!collection[p.type]){
									collection[p.type]=mergeable({});
								}
							p.value._n=Object.keys(collection[p.type]).length;
							collection[p.type][p.name]=p.value;
						} else { //Unnamed parameter, use a single value or array of values
							if (!	collection[p.type]){ //No parameters of the same type already exist
									collection[p.type] = p.value
								}
							else if(collection[p.type].push){ //>1 parameters of the same type already exist
									if(isObject(p.value)){p.value._n=collection[p.type].length;}
									collection[p.type].push(p.value)
								}
							else{	// Exactly one parameter of the same type already exists
									if(isObject(collection[p.type])){collection[p.type]._n = 0;} //Assign the first one an index
									collection[p.type] = [collection[p.type]] //Put it into an array
									if(isObject(p.value)){p.value._n=collection[p.type].length;} //Assign the new one an index
									collection[p.type].push(p.value)
							}
						}
					}catch(exception){throw {params, p, collection, exception}}
				})
			return collection
		}
	function isObject(o){return typeof o=="object" && !o.push}
}

declarationSet = ds:(declaration)* {return groupDeclarations(ds);}

declaration  = _ d:(
					labeledObject
                    / unlabeledObject
                    / sqlAttribute
                    / htmlAttribute
					/ exprAttribute
                    / arrayAttribute
                    / stringAttribute
                    / atomAttribute
                    ) _ {return d}

labeledObject   = type:atom _ ":" _ name:atom _ val:object {return {type:type,name:name,value:val}}
unlabeledObject = type:atom _ ":" _             val:object {return {type:type,name:undefined,value:val}}
sqlAttribute 	= type:sqlAtom _ ":"	        val:doubleSemiBlock   {return {type:type,name:undefined,value:val}}
htmlAttribute 	= type:htmlAtom _ ":"			val:doubleSemiBlock    {return {type:type,name:undefined,value:val}}
exprAttribute	= type:exprAtom _ ":"			val:doubleSemiBlock    {return {type:type,name:undefined,value:val}}
arrayAttribute  = type:atom _ ":" _  			val: (emptyList / atomStarList / stringList / mapList) {return {type:type,name:undefined,value:val}}
stringAttribute = type:atom _ ":" _ 			val:string    {return {type:type,name:undefined,value:val}}
atomAttribute   = type:atom _ ":" _ 			val:(atom) {return {type:type,name:undefined,value:(val=="yes"?true:val=="no"?false:val)}}


object = "{" _ d:declarationSet _ "}" {return d}

emptyList = "[" _ "]" {return [] }
atomStarList = "[" _ first:atomStar rest:(_ "," _ atomStar)* _ ","? _ "]" {return [first].concat(rest.map(r=>r[3]))}
stringList = "[" _ first:string rest:(_ "," _ string)* _ ","? _ "]" {return [first].concat(rest.map(r=>r[3]))}
mapList = "[" _ firstKey:atom _ ":" _ firstVal:string rest:(
		 _ "," _ atom _ ":" _ string
		)* 
		_ ","? _ "]" 
		{return rest.reduce(
			(obj,[_1,comma,_2,key,_3,colon,_4,value])=>({...obj, [key]:value}),
			{[firstKey]:firstVal}
			)}

atom = chars:[-_a-zA-Z0-9\.]+ {return chars.join('')}
atomStar = chars:[-_a-zA-Z0-9\.]+ maybeStar:"*"? {return chars.join('') + (maybeStar||'') }
sqlAtom = "sql" chars:[-_a-zA-Z0-9]* {return "sql"+chars.join('')}
htmlAtom = "html" chars:[-_a-zA-Z0-9]* {return "html"+chars.join('')}
exprAtom = "expr" chars:[-_a-zA-Z0-9]* {return "expr"+chars.join('')}

doubleSemiBlock = chars:([^;] / ( ";" [^;] ))*  ";;" {return chars.join('')}
//Hmm: Is a block whose last character is a ';' accepted by native parser?

string
  = "\"" chars:( stringLiteralCharacter / stringEscapedCharacter )* "\""
    {return chars.join('')}
  stringLiteralCharacter = [^"\\]
  stringEscapedCharacter = "\\" ch:. {return ch;}



_ = (whitespace / comment)* {return [];}

whitespace = [ \t\n\r]+ {return undefined;}
comment = "#" chars:[^\n\r]* [\n\r]*
